name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build project (optional)
        run: |
          echo "Build steps would go here if needed"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_push_image:
    name: Build and Push Docker Image (GHCR)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag
        id: meta
        run: |
          TAG="${GITHUB_REF_NAME}"
          REPO_LC="${GITHUB_REPOSITORY,,}"
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE=ghcr.io/${REPO_LC}/youtube-app" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG }}
            ${{ steps.meta.outputs.IMAGE }}:latest

  deploy_railway:
    name: Deploy to Railway
    needs: [create_release]
    if: ${{ secrets.RAILWAY_TOKEN != '' }}
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
      RAILWAY_ENVIRONMENT_ID: ${{ secrets.RAILWAY_ENVIRONMENT_ID }}
      SVC_ID: ${{ secrets.RAILWAY_SERVICE_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to Railway
        run: |
          set -e
          if [ -n "${RAILWAY_PROJECT_ID}" ]; then
            railway link --project "${RAILWAY_PROJECT_ID}"
          fi
          if [ -n "${RAILWAY_ENVIRONMENT_ID}" ]; then
            railway environment "${RAILWAY_ENVIRONMENT_ID}"
          fi
          if [ -n "${SVC_ID}" ]; then
            railway up --service="${SVC_ID}"
          else
            railway up
          fi

  deploy_ssh:
    name: Deploy to Server (SSH)
    needs: [create_release]
    if: ${{ secrets.DEPLOY_HOST != '' }}
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e
            REPO_URL="https://github.com/${{ github.repository }}.git"
            APP_DIR="${{ secrets.DEPLOY_PATH || '/srv/youtube' }}"
            if [ ! -d "$APP_DIR/.git" ]; then
              mkdir -p "$APP_DIR"
              git clone "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR"
            git fetch --all --tags
            # Checkout the exact tag we released
            git checkout "${GITHUB_REF_NAME}"
            git pull --ff-only || true
            # Ensure .env exists on server with runtime secrets
            if [ ! -f .env ]; then
              echo "[WARN] .env not found on server; create it before first run" >&2
            fi
            # Bring up stack (build locally per compose since app uses build:)
            docker compose up -d --build
