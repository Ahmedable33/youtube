name: CI/CD Pipeline

on:
  push:
    branches: [ main, 'feature/*', 'fix/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# DÃ©sactive les exÃ©cutions simultanÃ©es pour les mÃªmes Ã©vÃ©nements de workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # NÃ©cessaire pour les vÃ©rifications de commit

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-ci.txt
        pip install black flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --max-complexity=10 --max-line-length=120 --statistics

    - name: Check formatting with Black
      run: |
        black --check --diff --color src/ tests/

    - name: Run type checking with mypy
      run: |
        mypy --install-types --non-interactive src/

    - name: Run tests with pytest
      run: |
        pytest -v --cov=src --cov-report=xml --junitxml=test-results.xml
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml

  # Ajout d'un job de dÃ©ploiement conditionnel pour main
  deploy:
    name: Deploy
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

    - name: Configure AWS CLI
      if: github.ref == 'refs/heads/main'  # Uniquement pour la branche main
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_DEFAULT_REGION || 'us-east-1' }}

    - name: Deploy to production
      if: github.ref == 'refs/heads/main'  # Uniquement pour la branche main
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        YOUTUBE_CREDENTIALS: ${{ secrets.YOUTUBE_CREDENTIALS }}
        ENVIRONMENT: production
      run: |
        # CrÃ©er le rÃ©pertoire de configuration s'il n'existe pas
        mkdir -p config
        
        # Ã‰crire les credentials Google
        if [ -n "$GOOGLE_CREDENTIALS" ]; then
          echo "$GOOGLE_CREDENTIALS" > config/google_credentials.json
          echo "Google credentials configured"
        fi
        
        # Ã‰crire les credentials YouTube
        if [ -n "$YOUTUBE_CREDENTIALS" ]; then
          echo "$YOUTUBE_CREDENTIALS" > config/youtube_credentials.json
          echo "YouTube credentials configured"
        fi
        
        # VÃ©rifier la configuration
        echo "Deploying to $ENVIRONMENT environment"
        
        # ExÃ©cuter les migrations de base de donnÃ©es si nÃ©cessaire
        # python manage.py migrate
        
        # RedÃ©marrer les services si nÃ©cessaire
        # systemctl restart youtube-worker
        
        echo "âœ… Deployment completed successfully"
        
        # Notification de dÃ©ploiement rÃ©ussi
        curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"ðŸš€ Nouveau dÃ©ploiement rÃ©ussi sur '$ENVIRONMENT'!"}' \
          ${{ secrets.SLACK_WEBHOOK_URL || '' }}
      
    - name: Post-deployment tests
      if: always() && github.ref == 'refs/heads/main'
      run: |
        # VÃ©rifier que les services sont opÃ©rationnels
        echo "Running post-deployment checks..."
        # Exemple: curl -sSf http://localhost:8000/health > /dev/null
        echo "âœ… Post-deployment checks passed"
